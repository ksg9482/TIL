HTTP - HTML을 주고 받을 때 서로 지키기로 정한 규칙. 서버와 클라이언트가 주고 받는 메시지가 노출되어 있어서 탈취, 위조의 위험이 있다

HTTPS - HTTP의 보안을 강화한 것. 암호화된 연결로 웹 서버와 통신한다. SSL(TLS. Transport Layer Security)를 통해 HTTP 메시지를 암호화 한다.

SSL - 개인키와 공개키를 사용하고 제3자를 인증기관으로 이용해 보안을 강화하며 데이터를 암호화 한다.

암호화 - 정보를 허락된 사람들만 볼 수 있도록 알고리즘을 이용해 정보를 암호문으로 바꾼다. 이때 사용하는 비밀번호와 같은 것을 키(key)라고 한다.

대칭키 - 암호화 할 때 사용한 키를 복호화 할 때도 그대로 사용함. 정보를 암호화 한 후에 암호화에 사용한 키도 전달한다.

비밀키(개인키)와 공개키 - 비대칭키. 공개키는 노출되어 있으며 공개키를 이용하여 암호화 하면 비밀키를 가진 사람만이 이 정보를 복호화 할 수 있다. 반대로 비밀키로 암호화 할 수 있는데 이런식의 암호화를 이용하여 신원을 증명하는 방식을 전자서명이라 한다.

SSL 동작 방식 - 서버가 신회할 수 있는 사이트임을 확인한 클라이언트는 서버와의 핸드셰이크 단계에서 주고 받은 랜덤데이터를 이용해 키를 생성. 이 키를 대칭키 방식으로 사용. 인증서 안에는 서비스와 서버의 공개키가 들어있고, 대칭키를 이 공개키로 암호화 한 후 서버에 보내면 비밀키를 가진 서버만 대칭키를 복호화 할 수 있다. 대칭키를 이용하여 정보를 교하고 사용된 대칭키는 SSL접속이 끝나면 폐기 된다.

TCP (Transmission Control Protocol) - 연결 지향형 프로토콜. 3-way handshaking 과정을 통해 신뢰성을 보장하도록(흐름 제어, 혼잡제어, 오류제어) 하는 프로토콜이다. 연결을 종료할 때는 4-way handshaking을 사용한다. UDP에 비해 느리다. HTTP통신, 이메일 등에 사용.

UDP (User Datagram Protocol) - 데이터를 데이터그램 단위로 전송하는 프로토콜. 순서를 보장하지 않고 신뢰도가 낮은 데이터 통신을 하는 대신 단방향 데이터 전송으로 속도가 빠르다. 스트리밍등 연속성이 더 중요한 서비스에 사용된다.

HTTP 메서드 - GET - 리소스의 조회를 할 때 사용하고 몇번을 재요청해도 결과가 같은 멱등성이 보장된다. POST - 바디에 내용을 담아 보낼 수 있고, 멱등성을 보장하지 않는다.

TCP/IP 프로토콜 4계층 - 인터넷 기반의 효율적인 데이터 전송을 위한 프로토콜의 모음. 가장 상위부터 응용, 전송, 인터넷, 네트워크 엑세스 계층이다.
응용 계층 - HTTP, FTP 가 예. TCP/UDP 기반의 응용프로그램을 구현 할 때 사용. 
전송 계층 - TCP, UDP가 예. 통신 노드간 연결을 제어하고 데이터 전송을 담당.
인터넷 계층 - 통신 노드 간 IP 패킷을 전송하는 것과 라우팅 하는 기능을 담당.
네트워크 액세스 계층 - 네트워크의 하드웨어 제어를 담당.

OSI 7계층

HTTP 비연결성 (Connectionless) - 클라이언트 요청에 대해 서버가 응답을 한 후 바로 연결이 끊어지는 특징. 연결이 해제됨과 동시에 서버와 클라이언트는 이전에 요청한 결과를 잊어 상태를 유지하지 않는 무상태성(Stateless)의 특징을 띄기도 한다. 서버의 부담을 줄일 수 있지만 사용자 상태를 유지시킬 수 없기 때문에 세션이나 쿠키등이 필요하다.

세션 - 서버 측에 정보 저장. 타인에게 노출되어서는 않되고 서비스 제공자가 직접 관리해야 하는 정보를 저장한다. 세션에 저장된 정보가 너무 많으면 서버 부담이 커진다.
쿠키 - 클라이언트 측에 정보 저장. 사용자의 편의를 위하되 삭제, 탈취 당해도 큰 문제가 생기지 않을 정보를 저장한다.
토큰 - 인증에 필요한 정보를 암호화 시킨 토큰을 이용. 액세스 토큰을 HTTP 헤더에 실어 서버에 전송한다. 임의로 생성된 비밀번호와 같이 동작하며 제한된 수명을 가지고 있고, 만료되면 재생성 해야 한다.

쿠키의 보안 - Sesure - HTTPS가 아니면 쿠키를 전송하지 못하게 한다. HTTP Only - 서버 요청이 있을 때에만 쿠키가 전송되도록 하고 임의로 브라우저에 출력되지 않게 한다.

CORS (Cross_Origin Resource Sharing) - 출저가 다른 리소스도 공유할 수 있도록 하는 정책. 보안상 이유로 출처가 같은 리소스만 공유(Same-Origin Policy)할 수 있지만, CORS 정책을 지키는 리소스 요청이라면 다른 출처의 리소스와도 상호작용을 허용한다. 클라이언트가 요청메시지의 Origin 헤더에 해당 출처를 적어 보내고, 응답으로 받은 메시지의 Access-Control-Allow-Origin의 내용을 자신이 보냈던 Origin 헤더의 내용과 비교한다.

REST - 자원을 이름으로 구분하여 해당자원의 상태를 주고 받는다. 자원, 행위, 표현으로 구성되는데 HTTP URI를 통해 자원을 명시하고 HTTP Method를 통해 해당 자원에 CRUD를 적용한다.
RESTful - REST라는 아키텍처를 구현하는 웹서비스를 나타내는 용어. REST API를 제공하는 웹서비스를 RESTful하다고 한다.

API (Application Programming Interface) - 데이터와 기능의 집합을 제공해 컴퓨터 프로그램간 상호작용을 할 수 있게 한 것.

WS - 정적 파일을 제공하기 위한 서버로 HTTP 프로토콜에 의해 제공. 정적 파일로만 처리 가능한 것은 WAS로 요청을 넘기지 않고 바로 요청 처리. 
WAS - 동적인 데이터를 제공하기 위한 서버. 웹서버에서 처리할 수 없는 동적인 정보를 처리하여 웹서버에 정적인 정보를 제공한다.

클라우드 - 타사 제공업체가 호스팅하여 인터넷을 통해 사용자에게 제공하는 인프라, 플랫폼, 소프트웨어. 인터넷에 연결된 다른 컴퓨터의 자원을 빌려 활용한다.
IaaS - 서비스로서의 인프라. 사용자에게 컴퓨팅, 네트워크, 스토리지 자원 제공.
PaaS - 서비스로서의 플랫폼. 어플리케이션을 실행 할 수 있는 플랫폼과 플랫폼 실행에 필요한 인프라 제공.
SaaS - 서비스로서의 소프트웨어. 작동하는 어플리케이션과 그 어플리케이션을 실행할 수 있는 플랫폼, 플랫폼의 기반 인프라 제공.
FaaS - 서비스로서의 기능. 개발자가 인프라를 유지 관리 하지 않고도 어플리케이션과 기능을 구축하고 관리할 수 있도록 지원.

Status Code
200 - OK. 요청을 성공적으로 수행
201 - Created. 요청을 성공적으로 수행하고, 그 결과로 새로운 리소스 생성
204 - No Content. 요청을 성공적으로 수행하고, 그 결과로 리소스가 삭제

400 - Bad Request. 사용자의 잘못된 요청을 처리할 수 없음
401 - Unauthorized. 인증이 필요한 페이지 요청
403 - Forbidden. 접근 권한이 없음
404 - Not found. 요청한 페이지-리소스 없음
405 - Method not allowed. 허용되지 않은 HTTP Method 사용
408 - Request Timeout. 요청 시간 초과

500 - Internal server error. 내부 서버 오류
502 - Bad Gatesay. 게이트웨이 오류


도커 - 컨테이너 기반 오픈소스 가상화 플랫폼. 독립적 환경에서 일관된 결과를 보여준다. 그러나 초반 환경 설정시 시행착오를 겪을 수 있고, 리눅스에 친화적이기 때문에 플랫폼에 의존적이게 된다.

로드 밸런서 - 클라이언트와 서버 사이에 존재하며, 서버의 스케일 아웃을 높일 수 있다. 로드 밸런서에 문제가 생길 경우 전체 서비스가 작동하지 않는다. OSI 4계층에서 동작하는 것과 OSI 7계층에서 동작하는 것이 있다. 4계층에서 동작하는 로드밸런서는 자세하게 설정하지 못하지만 비용이 낮고, 7계층에서 동작하는 로드밸런서는 자세하게 설정이 가능하지만 비용이 높다.

NodeJS - 브라우저가 아닌 곳에서 자바스크립트를 동작시키기 위한 런타임. 
자바스크립트 - 인터프리터 언어이기 때문에 바이트언어로 변환되어 가상머신을 통제한다. 이벤트루프를 기반으로 동작하며, 프로토타입 기반 언어, 비동기I/O, 단일스레드로 작동한다. 

이벤트 루프 - 자바스크립트는 하나의 호출스택을 갖는 싱글 스레드 언어이다. 이벤트루프 기반의 비동기 방식으로 Non-blocking I/O를 지원. 비동기 함수 실행시 task-queue에 등록되고 이벤트루프 바깥에서 코드가 실행되고, 그 후 이벤트루프를 확인해 남은 작업이 있다면 실행한다. 여러 페이즈로 나누어져 있고 각 페이즈는 담당으로 정해진 작업만 관리한다.

var와 let, const차이 - var는 es6이전의 변수할당 문법이고, let과 const는 es6문법이다. let과 const는 호이스팅시 실질적으로 호출되는 곳까지 도달하지 않으면 초기화되지 않기 때문에 선언된 라인 이전에 값을 사용할 수 없다.

스코프 - 식별자의 유효범위. 선언된 위치에 따라 유효범위가 달라진다. 전역 스코프는 어디에서든 참조할 수 있지만, 지역 스코프는 자신의 지역과 그 하위 지역에서 유효하다. 모든 코드블록(if, for, try/catch 등)은 지역 스코프를 만들며 이런 지역 스코프를 블록레벨 스코프라고 한다.

Promise - 비동기 처리에 사용되는 객체. resoleve 함수와 reject함수를 인자로 받을 수 있고, 성공시 resoleve 함수를 호출하고, 실패시 reject함수를 호출한다.

클로저

DB 키 종류
후보키 - 유일성(해당 키로 하나의 튜플을 식별가능)과 최소성(꼭 필요한 속성으로만 이루어짐)을 만족한 키.
기본키 - 후보키 중 하나. Null값, 중복값을 가질 수 없다.
대체키/보조키 - 기본키를 제외한 후보키
외래키 - 다른 릴레이션의 속성, 참조 관계를 표현하는데 사용
슈퍼키 - 유일성은 만족하나 최소성은 만족하지 못하는 키

조인(JOIN) - 두 가지 이상의 릴레이션을 연결해서 데이터를 검색하는 기법. RDBMS에서는 릴레이션끼지 관계를 가지고 있는데 각 테이블에 저장된 데이터를 효과적으로 검색하기 위해 조인이 필요하다.
Inner Join - 기본적인 조인
Outer Join - 특정 테이블의 데이터가 모두 필요한 경우
Self Join - 자기 자신과 자기 자신 결합

SQL injection 해커에 의해 조작된 쿼리문이 DB에 그대로 전달되어 비정상적인 명령을 실행시키는 공격 기법

ORM - Object-Relation Mapping. 객체-관계 매핑. 객체지향적인 코드로 비즈니스 로직에 집중 가능. 재사용 및 유지보수를 용이하게 하고, DBMS에 대한 종속성을 감소시킨다. 

왜 DB를 사용하는가 - 

RDB - 관계형 데이터베이스. 데이터가 하나 이상의 열과 행으로 구성된 테이블에 저장되고, 서로 다른 데이터 구조물이 어떻게 관계되어 있는지 표현한다.

트랜잭션 - 여러개의 작업을 하나로 묶은 실행 단위. 다 성공하거나 다 실패하거나. 하나라도 실패하면 트랜잭션 자체가 실패한다.

ACID - 데이터베이스 내부에서 일어나는 하나의 트랜잭션의 안정성을 보장하기 위해 필요한 성질. 발생할 수 있는 예외사항을 줄이고, DB의 무결성을 보호할 수 있다.
A - Atomicity 원자성. 한 트랜잭션의 연산이 모두 성공하거나 하나라도 실패하면 트랜잭션 자체가 실패하는 성질.
C - Consitency 일관성. 한 트랜잭션 이후에 그 이전처럼 DB의 제약과 규칙을 만족해야 한다.
I - Isolation 고립성. 한 트랜잭션은 다른 트랜잭션으로부터 독립되어야 한다.
D - Durability 지속성. 한 트랜잭션이 성공적으로 수행되었으면 DB에 반영되어야 한다.

스키마 - DB의 구조와 제약조건에 관해 명세를 기술한 것.

View - 가상 테이블. 보안, 편의, 수행속도 향상을 목적으로 한다. 필요한 데이터만 뷰로 정의 할 수 있고, 독립적 인덱스가 불가능하다.

정규화 - RDB에서 중복을 최소화하기 위해 데이터를 분해하는 작업을 말한다. 이상현상을 방지할 수 있다는 장점이 있지만, 릴레이션 간의 연산이 많아질 수 있다는 단점이 있다.

반정규화 - 성능향상을 위해 중복, 통합을 하는 기법. JOIN으로 인해 성능저하가 예상되는 경우 실행하지만, 과도할 경우 무결성이 깨질 수 있다.

정규화 이상 - 데이터의 중복으로 인한 부작용
삽입 이상 - 데이터를 삽입하는 데 필요없는 속성도 함께 추가해야 함
갱신 이상 - 데이터를 갱신한 이후 일관성이 위반됨
삭제 이상 - 데이터를 삭제하는 데 의도하지 않은 것이 함께 삭제되어 정보손실이 일어남

인덱스 - 검색 연산의 속도를 높이기 위한 방법. 항상 정렬된 상태를 유지하므로 탐색이 빠르지만, 데이터 삽입/수정/삭제 시에는 추가적인 작업이 필요하므로 실행속도가 느려진다.

Commit - 모든 작업을 정상적으로 처리하겠다고 확정하는 명령. 실제 DB에 저장. 수행 후 하나의 트랜잭션이 종료된다.
Rollback - 작업 중 문제가 발생하면 변경사항을 취소하고 트랜잭션을 종료한다. 이전 Commit까지만 복구.

NoSQL - RDB의 테이블 구조와는 다른 형태로 데이터를 저장한다. MongoDB는 문서형태로 데이터를 저장하고 Redis는 key-value형태로 데이터를 저장한다.
